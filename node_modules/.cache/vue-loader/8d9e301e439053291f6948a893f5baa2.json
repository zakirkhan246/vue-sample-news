{"remainingRequest":"/var/www/ordant/assignment/vue-sample-news/node_modules/vue-loader/lib/loaders/templateLoader.js??vue-loader-options!/var/www/ordant/assignment/vue-sample-news/node_modules/cache-loader/dist/cjs.js??ref--0-0!/var/www/ordant/assignment/vue-sample-news/node_modules/vue-loader/lib/index.js??vue-loader-options!/var/www/ordant/assignment/vue-sample-news/src/components/TopNavigation.vue?vue&type=template&id=19f9f8c9&","dependencies":[{"path":"/var/www/ordant/assignment/vue-sample-news/src/components/TopNavigation.vue","mtime":1576508083972},{"path":"/var/www/ordant/assignment/vue-sample-news/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/ordant/assignment/vue-sample-news/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/var/www/ordant/assignment/vue-sample-news/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/var/www/ordant/assignment/vue-sample-news/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:dmFyIHJlbmRlciA9IGZ1bmN0aW9uKCkgewogIHZhciBfdm0gPSB0aGlzCiAgdmFyIF9oID0gX3ZtLiRjcmVhdGVFbGVtZW50CiAgdmFyIF9jID0gX3ZtLl9zZWxmLl9jIHx8IF9oCiAgcmV0dXJuIF9jKAogICAgImRpdiIsCiAgICBbCiAgICAgIF9jKAogICAgICAgICJiLW5hdmJhciIsCiAgICAgICAgeyBhdHRyczogeyB0b2dnbGVhYmxlOiAibGciLCB0eXBlOiAiZGFyayIsIHZhcmlhbnQ6ICJpbmZvIiB9IH0sCiAgICAgICAgWwogICAgICAgICAgX2MoImItbmF2YmFyLWJyYW5kIiwgeyBhdHRyczogeyB0bzogIi8iIH0gfSwgW192bS5fdigiTkVXUy1TQU1QTEUiKV0pLAogICAgICAgICAgX2MoImItbmF2YmFyLXRvZ2dsZSIsIHsgYXR0cnM6IHsgdGFyZ2V0OiAibmF2LWNvbGxhcHNlIiB9IH0pLAogICAgICAgICAgX2MoCiAgICAgICAgICAgICJiLWNvbGxhcHNlIiwKICAgICAgICAgICAgeyBhdHRyczogeyBpZDogIm5hdi1jb2xsYXBzZSIsICJpcy1uYXYiOiAiIiB9IH0sCiAgICAgICAgICAgIFsKICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICJiLW5hdmJhci1uYXYiLAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygiYi1uYXYtaXRlbSIsIHsgYXR0cnM6IHsgdG86ICIvdG9wLWhlYWRsaW5lcyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJUb3AgSGVhZGxpbmVzIikKICAgICAgICAgICAgICAgICAgXSksCiAgICAgICAgICAgICAgICAgIF9jKAogICAgICAgICAgICAgICAgICAgICJiLW5hdi1pdGVtIiwKICAgICAgICAgICAgICAgICAgICB7IGF0dHJzOiB7IHRvOiAiL291ci1zb3VyY2VzIiwgZGlzYWJsZWQ6ICIiIH0gfSwKICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJPdXIgU291cmNlcyIpXQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICksCiAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAiYi1uYXZiYXItbmF2IiwKICAgICAgICAgICAgICAgIHsgc3RhdGljQ2xhc3M6ICJtbC1hdXRvIiB9LAogICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYi1uYXYtZm9ybSIsCiAgICAgICAgICAgICAgICAgICAgWwogICAgICAgICAgICAgICAgICAgICAgX2MoImItZm9ybS1pbnB1dCIsIHsKICAgICAgICAgICAgICAgICAgICAgICAgc3RhdGljQ2xhc3M6ICJtci1zbS0yIiwKICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc2l6ZTogInNtIiwgcGxhY2Vob2xkZXI6ICJTZWFyY2giIH0KICAgICAgICAgICAgICAgICAgICAgIH0pLAogICAgICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgICAgICJiLWJ1dHRvbiIsCiAgICAgICAgICAgICAgICAgICAgICAgIHsKICAgICAgICAgICAgICAgICAgICAgICAgICBzdGF0aWNDbGFzczogIm15LTIgbXktc20tMCIsCiAgICAgICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgc2l6ZTogInNtIiwgdHlwZTogInN1Ym1pdCIgfQogICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICBbX3ZtLl92KCJTZWFyY2giKV0KICAgICAgICAgICAgICAgICAgICAgICkKICAgICAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgICAgIDEKICAgICAgICAgICAgICAgICAgKSwKICAgICAgICAgICAgICAgICAgX2MoCiAgICAgICAgICAgICAgICAgICAgImItbmF2LWl0ZW0tZHJvcGRvd24iLAogICAgICAgICAgICAgICAgICAgIHsgYXR0cnM6IHsgdGV4dDogIkxhbmciLCByaWdodDogIiIgfSB9LAogICAgICAgICAgICAgICAgICAgIFsKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWRyb3Bkb3duLWl0ZW0iLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJFTiIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWRyb3Bkb3duLWl0ZW0iLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJFUyIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWRyb3Bkb3duLWl0ZW0iLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJSVSIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWRyb3Bkb3duLWl0ZW0iLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJGQSIpCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApLAogICAgICAgICAgICAgICAgICBfYygKICAgICAgICAgICAgICAgICAgICAiYi1uYXYtaXRlbS1kcm9wZG93biIsCiAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgYXR0cnM6IHsgcmlnaHQ6ICIiIH0sCiAgICAgICAgICAgICAgICAgICAgICBzY29wZWRTbG90czogX3ZtLl91KFsKICAgICAgICAgICAgICAgICAgICAgICAgewogICAgICAgICAgICAgICAgICAgICAgICAgIGtleTogImJ1dHRvbi1jb250ZW50IiwKICAgICAgICAgICAgICAgICAgICAgICAgICBmbjogZnVuY3Rpb24oKSB7CiAgICAgICAgICAgICAgICAgICAgICAgICAgICByZXR1cm4gW19jKCJlbSIsIFtfdm0uX3YoIlpha2lyIildKV0KICAgICAgICAgICAgICAgICAgICAgICAgICB9LAogICAgICAgICAgICAgICAgICAgICAgICAgIHByb3h5OiB0cnVlCiAgICAgICAgICAgICAgICAgICAgICAgIH0KICAgICAgICAgICAgICAgICAgICAgIF0pCiAgICAgICAgICAgICAgICAgICAgfSwKICAgICAgICAgICAgICAgICAgICBbCiAgICAgICAgICAgICAgICAgICAgICBfYygiYi1kcm9wZG93bi1pdGVtIiwgeyBhdHRyczogeyBocmVmOiAiIyIgfSB9LCBbCiAgICAgICAgICAgICAgICAgICAgICAgIF92bS5fdigiUHJvZmlsZSIpCiAgICAgICAgICAgICAgICAgICAgICBdKSwKICAgICAgICAgICAgICAgICAgICAgIF9jKCJiLWRyb3Bkb3duLWl0ZW0iLCB7IGF0dHJzOiB7IGhyZWY6ICIjIiB9IH0sIFsKICAgICAgICAgICAgICAgICAgICAgICAgX3ZtLl92KCJTaWduIE91dCIpCiAgICAgICAgICAgICAgICAgICAgICBdKQogICAgICAgICAgICAgICAgICAgIF0sCiAgICAgICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICAgICApCiAgICAgICAgICAgICAgICBdLAogICAgICAgICAgICAgICAgMQogICAgICAgICAgICAgICkKICAgICAgICAgICAgXSwKICAgICAgICAgICAgMQogICAgICAgICAgKQogICAgICAgIF0sCiAgICAgICAgMQogICAgICApCiAgICBdLAogICAgMQogICkKfQp2YXIgc3RhdGljUmVuZGVyRm5zID0gW10KcmVuZGVyLl93aXRoU3RyaXBwZWQgPSB0cnVlCgpleHBvcnQgeyByZW5kZXIsIHN0YXRpY1JlbmRlckZucyB9"}]}